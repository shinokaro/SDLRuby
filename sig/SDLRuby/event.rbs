module SDLRuby
  type event_type_symbols = (
      :adevice | :button | :caxis | :cbutton | :cdevice | :common | :csensor |
        :ctouchpad | :dgesture | :display | :drop | :edit | :editExt | :jaxis |
        :jball | :jbattery | :jbutton | :jdevice | :jhat | :key | :mgesture |
        :motion | :quit | :sensor | :syswm | :text | :tfinger | :user |
        :wheel | :window
     )

  class Event
    @st: untyped

    def self.clear: -> void

    def self.count: -> Integer

    def self.disable: (untyped) -> void

    def self.enable: (untyped) -> void

    def self.flash: -> void

    def self.get: -> Event

    def self.poll: (Event) -> Event

    def self.pump: -> nil

    alias self.update self.pump

    def self.quit?: -> bool

    def initialize: -> void

    attr_reader entity: any

    def to_ptr: -> untyped

    def to_sym: -> (event_type_symbols)

    def update: -> self

    module Accessor
      include SDL

      self.@modules: Hash[Symbol, Module]
      self.@_ptr: untyped

      def self.[]: (event_type_symbols) -> Module

      private

      def char_ary_to_str: (untyped) -> String
      def char_ptr_to_str: (untyped) -> String

      public

      def capture?: -> bool
      def pressed?: -> bool
      def file: -> String
      def text: -> String
      def keysym: -> untyped
      def msg: -> untyped
      def data1: -> untyped
      def data2: -> untyped
    end

    module Type
      QUIT_EVENT: Range[Integer]
      DISPLAY_EVENT: Range[Integer]
      WINDOW_EVENT: Range[Integer]
      SYSWM_EVENT: Range[Integer]
      KEY_EVENT: Range[Integer]
      EDIT_EVENT: Range[Integer]
      TEXT_EVENT: Range[Integer]
      EDIT_EXT_EVENT: Range[Integer]
      MOTION_EVENT: Range[Integer]
      BUTTON_EVENT: Range[Integer]
      WHEEL_EVENT: Range[Integer]
      JAXIS_EVENT: Range[Integer]
      JBALL_EVENT: Range[Integer]
      JHAT_EVENT: Range[Integer]
      JBUTTON_EVENT: Range[Integer]
      JDEVICE_EVENT: Range[Integer]
      JBATTERY_EVENT: Range[Integer]
      CAXIS_EVENT: Range[Integer]
      CBUTTON_EVENT: Range[Integer]
      CDEVICE_EVENT: Range[Integer]
      CTOUCHPAD_EVENT: Range[Integer]
      CSENSOR_EVENT: Range[Integer]
      TFINGER_EVENT: Range[Integer]
      DGESTURE_EVENT: Range[Integer]
      MGESTURE_EVENT: Range[Integer]
      DROP_EVENT: Range[Integer]
      ADEVICE_EVENT: Range[Integer]
      SENSOR_EVENT: Range[Integer]
      USER_EVENT: Range[Integer]

      include SDL

      def self.to_sym: (Integer) -> (event_type_symbols)
    end
  end
end
